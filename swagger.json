{
	"openapi": "3.0.1",
	"info": {
		"version": "1.0.1",
		"title": "Express API for 'TaskPro' project",
		"description": "REST API Application for 'TaskPro' project by ITDreamers, (GoIT), 2023",
		"contact": {
			"name": "Git repository",
			"url": "https://github.com/svmoskalyov/taskpro-api"
		},
		"license": {
			"name": "License - MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"consumes": ["application/json", "image"],
	"produces": ["application/json"],
	"servers": [
		{ "url": "http://localhost:5000", "description": "Development server" },
		{
			"url": "https://taskpro-api.onrender.com",
			"description": "Production server"
		}
	],
	"tags": [
		{
			"name": "UsersAuth",
			"description": "Authorization endpoints"
		}
	],
	"paths": {
		"/users/register": {
			"post": {
				"tags": ["UsersAuth"],
				"summary": "User registration",
				"parameters": [],
				"requestBody": {
					"description": "Registration's object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created (Successful operation)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RegistrationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (Invalid request body or Missing fields)",
						"content": {}
					},
					"409": {
						"description": "Conflict (Email already in use)",
						"content": {}
					}
				}
			}
		},
		"/users/login": {
			"post": {
				"tags": ["UsersAuth"],
				"summary": "User authentication",
				"parameters": [],
				"requestBody": {
					"description": "Login's object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK (Successful operation)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (Invalid request body or Missing fields)",
						"content": {}
					},
					"401": {
						"description": "Not authorized (Email or password is wrong)",
						"content": {}
					}
				}
			}
		},
		"/users/google": {
			"get": {
				"tags": ["UsersAuth"],
				"summary": "User Google authentication",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK (Successful operation (redirect to front-end with accessToken, refreshToken and sid in query). Then use GET /user)"
						},
					"400": {
						"description": "Bad request (Invalid request body or Missing fields)",
						"content": {}
					},
					"401": {
						"description": "Not authorized (Email or password is wrong)",
						"content": {}
					}
				}
			}
		},
		"/users/refresh": {
			"post": {
				"security": [{ "Bearer": [] }],
				"tags": ["UsersAuth"],
				"summary": "User refresh token",
				"parameters": [],
				"requestBody": {
					"description": "Refresh object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RefreshRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK (Successful operation)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (Invalid request body or Missing fields)",
						"content": {}
					},
					"403": {
						"description": "Forbidden (Invalid refresh token)",
						"content": {}
					}
				}
			}
		},
		"/users/current": {
			"get": {
				"security": [{ "Bearer": [] }],
				"tags": ["UsersAuth"],
				"summary": "Get current user info",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK (Successful operation)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetCurrentUserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (Invalid request body / No token)",
						"content": {}
					},
					"401": {
						"description": "Not authorized (Invalid access token)",
						"content": {}
					},
					"404": {
						"description": "Not found (Invalid user / Invalid session)",
						"content": {}
					}
				}
			}
		},
		"/users/profile": {
			"put": {
				"security": [{ "Bearer": [] }],
				"tags": ["UsersAuth"],
				"summary": "User edit profile",
				"parameters": [],
				"requestBody": {
					"description": "Profile update object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProfileUpdateRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK (Successful operation)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfileUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (Invalid request body / No token)",
						"content": {}
					},
					"401": {
						"description": "Not authorized (Invalid access token)",
						"content": {}
					},
					"404": {
						"description": "Not found (Invalid user / Invalid session)",
						"content": {}
					}
				}
			}
		},
		"/users/theme": {
			"patch": {
				"security": [{ "Bearer": [] }],
				"tags": ["UsersAuth"],
				"summary": "User edit theme",
				"parameters": [],
				"requestBody": {
					"description": "Theme update object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ThemeUpdateRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK (Successful operation)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThemeUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (Invalid request body / No token)",
						"content": {}
					},
					"401": {
						"description": "Not authorized (Invalid token)",
						"content": {}
					},
					"404": {
						"description": "Not found (Invalid user / Invalid session)",
						"content": {}
					}
				}
			}
		},
		"/users/avatar": {
			"post": {
				"security": [{ "Bearer": [] }],
				"tags": ["UsersAuth"],
				"summary": "User avatar update",
				"parameters": [],
				"requestBody": {
					"description": "Avatar update object",
					"required": true,
					"content": {
						"image/png": {
							"schema": {
								"$ref": "#/components/schemas/AvatarUpdateRequest"

							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK (Successful operation)",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AvatarUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (Invalid request body / No token)",
						"content": {}
					},
					"401": {
						"description": "Not authorized (Invalid token)",
						"content": {}
					},
					"404": {
						"description": "Not found (Invalid user / Invalid session)",
						"content": {}
					}
				}
			}
		},
		"/users/logout": {
			"post": {
				"security": [{ "Bearer": [] }],
				"tags": ["UsersAuth"],
				"summary": "User logout",
				"parameters": [],
				"responses": {
					"204": {
						"description": "No Content (Successful operation)"
					},
					"400": {
						"description": "Bad request (No token)",
						"content": {}
					},
					"401": {
						"description": "Not authorized (Invalid token)",
						"content": {}
					},
					"404": {
						"description": "Not found (Invalid user / Invalid session)",
						"content": {}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"RegistrationRequest": {
				"type": "object",
				"required": ["name", "email", "password"],
				"properties": {
					"name": {
						"type": "string",
						"description": "User's name",
						"example": "User Name"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					},
					"password": {
						"type": "string",
						"description": "User's password",
						"example": "qwerty123"
					}
				}
			},
			"RegistrationResponse": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "User's name",
						"example": "User Name"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					}
				}
			},
			"LoginRequest": {
				"type": "object",
				"required": ["email", "password"],
				"properties": {
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					},
					"password": {
						"type": "string",
						"description": "User's password",
						"example": "qwerty123"
					}
				}
			},
			"LoginResponse": {
				"type": "object",
				"properties": {
					"accessToken": {
						"type": "string",
						"description": "User's access token",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OGYyMmRkYTJkOGY4NTM3ZDU4MDgxMiIsImlhdCI6MTY4NzEwNDE4MywiZXhwIjoxNjg3MTg2OTgzfQ.ACnMrbr2S0GB9uSVpb2oGQI813s1kNLuiFZEFCfUN0s"
					},
					"refreshToken": {
						"type": "string",
						"description": "User's refresh token",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OGYyMmRkYTJkOGY4NTM3ZDU4MDgxMiIsImlhdCI6MTY4NzEwNDE4MywiZXhwIjoxNjg3MTg2OTgzfQ.ACnMrbr2S0GB9uSVpb2oGQI813s1kNLuiFZEFCfUN0s"
					}
				}
			},
			"RefreshRequest": {
				"type": "object",
				"required": ["refreshToken"],
				"properties": {
					"refreshToken": {
						"type": "string",
						"description": "User's refresh token",
						"example": "qwerty1fbhtyj166.yuikui154564561.5y1rh23"
					}
				}
			},
			"RefreshResponse": {
				"type": "object",
				"properties": {
					"accessToken": {
						"type": "string",
						"description": "User's access token",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OGYyMmRkYTJkOGY4NTM3ZDU4MDgxMiIsImlhdCI6MTY4NzEwNDE4MywiZXhwIjoxNjg3MTg2OTgzfQ.ACnMrbr2S0GB9uSVpb2oGQI813s1kNLuiFZEFCfUN0s"
					},
					"refreshToken": {
						"type": "string",
						"description": "User's refresh token",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OGYyMmRkYTJkOGY4NTM3ZDU4MDgxMiIsImlhdCI6MTY4NzEwNDE4MywiZXhwIjoxNjg3MTg2OTgzfQ.ACnMrbr2S0GB9uSVpb2oGQI813s1kNLuiFZEFCfUN0s"
					}
				}
			},
			"GetCurrentUserResponse": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					}
				}
			},
			"ProfileUpdateRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "User's name",
						"example": "User Name"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					}
				}
			},
			"ProfileUpdateResponse": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "User's name",
						"example": "User Name"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email"
					}
				}
			},
			"AvatarUpdateRequest": {
				"type": "object",
				"properties": {
					"file": {
						"type": "string",
								"format": "binary"
					}
				}
			},
			"AvatarUpdateResponse": {
				"type": "object",
				"properties": {
					"avatarURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "some url to be added"
					}
				}
			},
			"ThemeUpdateRequest": {
				"type": "object",
				"properties": {
					"theme": {
						"type": "string",
						"description": "User's color theme",
						"enum": ["dark", "light", "violet"],
						"example": "dark"
					}
				}
			},
			"ThemeUpdateResponse": {
				"type": "object",
				"properties": {
					"theme": {
						"type": "string",
						"description": "User's color theme",
						"example": "dark"
					}
				}
			}
		},
		"securitySchemes": {
			"Bearer": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
